{"version":3,"sources":["Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["twentyFiveMinutesInSeconds","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","stopTimer","setState","totalSecondsRemaining","state","minutes","seconds","placeHolderZero","timerHasStarted","workTimer","shortBreak","longBreak","calculateMinutes","bind","assertThisInitialized","calculateSeconds","startTimer","invokeTime","handlePlaceHolderZero","totalSeconds","Math","floor","_this3","console","log","cb","clearInterval","_this4","tickInterval","setInterval","_this$state","react_default","a","createElement","className","id","es_button","type","onClick","Component","App","Components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.873ef912.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'antd';\nimport \"antd/dist/antd.css\"\n\nconst twentyFiveMinutesInSeconds = 60 * 25;\n\nclass Main extends Component {\n  constructor() {\n    super();\n    this.state = {\n      minutes: 25,\n      seconds: 0,\n      placeHolderZero: 0,\n      totalSecondsRemaining: twentyFiveMinutesInSeconds,\n      timerHasStarted: false,\n      workTimer: true,\n      shortBreak: false,\n      longBreak: false,\n    };\n    this.calculateMinutes = this.calculateMinutes.bind(this);\n    this.calculateSeconds = this.calculateSeconds.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.invokeTime = this.invokeTime.bind(this);\n    this.handlePlaceHolderZero = this.handlePlaceHolderZero.bind(this);\n    this.workTimer = this.workTimer.bind(this);\n    this.shortBreak = this.shortBreak.bind(this);\n    this.longBreak = this.longBreak.bind(this);\n  }\n\n  calculateMinutes(totalSeconds) {\n    const remainingMinutes = (seconds) => this.setState({ minutes: Math.floor(seconds / 60) });\n    remainingMinutes(totalSeconds);\n  }\n  calculateSeconds(totalSeconds) {\n    const remainingSeconds = (seconds) => this.setState({ seconds: Math.floor(seconds % 60) });\n    console.log(totalSeconds);\n    remainingSeconds(totalSeconds);\n  }\n  invokeTime() {\n    this.setState({ totalSecondsRemaining: this.state.totalSecondsRemaining - 1 })\n    this.calculateMinutes(this.state.totalSecondsRemaining);\n    this.calculateSeconds(this.state.totalSecondsRemaining);\n  }\n  handlePlaceHolderZero() {\n    if (Math.floor(this.state.totalSecondsRemaining % 60 < 10)) {\n      this.setState({ placeHolderZero: 0 });\n    } else {\n      this.setState({ placeHolderZero: '' });\n    }\n  }\n  workTimer(cb) {\n    this.stopTimer();\n    this.setState({ workTimer: true, shortBreak: false, longBreak: false, timerHasStarted: false, minutes: 25, seconds: 0, totalSecondsRemaining: twentyFiveMinutesInSeconds, placeHolderZero: 0 });\n    clearInterval(cb);\n  }\n\n  shortBreak(cb) {\n    this.stopTimer();\n    this.setState({ workTimer: false, shortBreak: true, longBreak: false, timerHasStarted: false, minutes: 5, seconds: 0, totalSecondsRemaining: 60 * 5, placeHolderZero: 0 });\n    clearInterval(cb);\n  }\n\n  longBreak(cb) {\n    this.stopTimer();\n    this.setState({ workTimer: false, shortBreak: false, longBreak: true, timerHasStarted: false, minutes: 15, seconds: 0, totalSecondsRemaining: 60 * 15, placeHolderZero: 0 });\n    clearInterval(cb);\n  }\n\n\n  startTimer() {\n    // (REFACTOR) Break this up into multiple functions\n    if (this.state.timerHasStarted === false) {\n      this.setState({ timerHasStarted: true });\n      let tickInterval = setInterval(() => {\n        if (this.state.totalSecondsRemaining !== 0) {\n          this.invokeTime();\n          this.handlePlaceHolderZero();\n        }\n        if (this.state.totalSecondsRemaining / 60 === 0 && this.state.totalSecondsRemaining % 60 === 0) {\n          if (this.state.workTimer) {\n            this.workTimer(tickInterval);\n          }\n          if (this.state.shortBreak) {\n            this.shortBreak(tickInterval);\n          }\n          if (this.state.longBreak) {\n            this.longBreak(tickInterval);\n          }\n        }\n      }, 1000);\n    }\n  }\n\n  stopTimer = () => {\n    this.setState({ totalSecondsRemaining: 0 })\n  }\n\n  render() {\n    let { minutes, seconds, placeHolderZero } = this.state;\n    return (\n      <div className=\"main-page\">\n        <h1 id=\"title\">Podomoro Timer</h1>\n        <div id=\"button-options\">\n          <Button className=\"\" type=\"primary\" onClick={this.workTimer}>Work Timer</Button>\n          <Button className=\"\" type=\"primary\" onClick={this.shortBreak}>Short Break</Button>\n          <Button className=\"\" type=\"primary\" onClick={this.longBreak}>Long Break</Button>\n        </div>\n        <h1>{minutes}:{placeHolderZero}{seconds}</h1>\n        <Button className=\"\" type=\"primary\" onClick={this.startTimer}>Start Timer</Button>\n        <Button className=\"\" type=\"primary\" onClick={this.stopTimer}>Reset Timer</Button>\n      </div>\n    );\n  }\n}\n\n\nexport default Main;","import React, { Component } from 'react';\nimport './styles/app.css';\nimport \"antd/dist/antd.css\"\nimport Home from './Components/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}