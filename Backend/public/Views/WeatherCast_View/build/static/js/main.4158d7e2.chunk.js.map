{"version":3,"sources":["logo.svg","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","city","imageURI","preImageURI","cityWeather","submited","cityImageURI","getCity","bind","assertThisInitialized","getCityImage","_this2","fetch","concat","then","res","json","imgData","results","total","setState","Math","floor","random","length","urls","regular","catch","error","console","log","event","_this3","preventDefault","myString","replace","weatherData","cod","toUpperCase","target","value","backgroundStyle","background","backgroundSize","overflow","minHeight","react_default","a","createElement","className","style","id","onSubmit","placeholder","type","onChange","fontSize","letterSpacing","main","temp","weather","description","Component","Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4158d7e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: null,\n      imageURI: '',\n      preImageURI: '',\n      cityWeather: {},\n      submited: false,\n      cityImageURI: '',\n    };\n    this.getCity = this.getCity.bind(this);\n    this.getCityImage = this.getCityImage.bind(this);\n  }\n\n  componentWillMount() {\n    const defaultImageKeyword = 'travel';\n    fetch(`https://api.unsplash.com/search/photos?page=1&query=${defaultImageKeyword}&client_id=4c1f5525e6dcace5b7a268ca4f5ac18f69dd4b46f3b01226b4287772783938e4`)\n    .then(res => res.json())\n    .then(imgData => { \n      if (imgData.results && imgData.total !== 0) this.setState({ cityImageURI: imgData.results[Math.floor(Math.random() * (imgData.results.length - 1))].urls.regular });\n      // error handle needed\n    })\n    .catch(error => console.log(error));\n  }\n\n\n\n  getCity(event) {\n    event.preventDefault();\n    console.log(this.state.preImageURI)\n    const myString = this.state.preImageURI.replace(/\\s+/g, '+');\n    fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\" + myString + \"&appid=63dd0d75cb039f76bb9b092405a90895&units=imperial\")\n      .then(res => res.json())\n      .then(weatherData => {\n        if (weatherData.cod !== \"404\") {\n          fetch(`https://api.unsplash.com/search/photos?page=1&query=${this.state.preImageURI.replace(/\\s+/g, '+')}&client_id=4c1f5525e6dcace5b7a268ca4f5ac18f69dd4b46f3b01226b4287772783938e4`)\n            .then(res => res.json())\n            .then(imgData => {\n              console.log(imgData);\n\n              if (imgData.results && imgData.total !== 0) {\n                console.log(imgData);\n                 this.setState({ cityImageURI: imgData.results[Math.floor(Math.random() * (imgData.results.length - 1))].urls.regular });\n                this.setState({ imageURI: this.state.preImageURI.toUpperCase() });\n                this.setState({ cityWeather: weatherData });\n              } else {\n                this.setState({ imageURI: 'City was not found' });\n              }\n            });\n        } else {\n          this.setState({ imageURI: 'City was not found', cityWeather: '', });\n        }\n      });\n  }\n\n  getCityImage(event) {\n    this.setState({ preImageURI: event.target.value });\n  }\n\n\n\n\n\n  render() {\n    const backgroundStyle = {\n      background: `linear-gradient( rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4) ), url(${this.state.cityImageURI}) no-repeat 50% fixed / cover`,\n      backgroundSize: 'cover',\n      // backgroundRepeat: 'no-repeat', g\n      overflow: 'hidden',\n      minHeight: '100vh',\n    };\n    return (\n      <div className=\"row\" style={backgroundStyle}>\n        <div id=\"background\" className=\"col w-100 d-flex flex-column justify content-start align-content-center align-items-center\">\n          <form className=\" w-50 mt-5\" onSubmit={this.getCity}>\n            <div className=\"input-group\">\n              {/* <label >Enter a city</label> */}\n              <input placeholder=\"Enter A City...\" type=\"text\" value={this.state.preImageURI} className=\"form-control\" onChange={this.getCityImage} id=\"exampleFormControlInput1\" />\n              <button type=\"submit\" className=\"btn btn-light ml-1\">Submit</button>\n            </div>\n            <div className=\"form-group\">\n            </div>\n          </form>\n          <h2 style={{ fontSize: '250%', letterSpacing: '3px' }} className=\"text-white mt-5\">{this.state.imageURI}</h2>\n          <h1 style={{ fontSize: '250%', }} className=\"text-white\">{this.state.cityWeather && this.state.cityWeather.main && this.state.cityWeather.main.temp}</h1>\n          <h2 style={{ fontSize: '250%', }} className=\"text-white\">{this.state.cityWeather && this.state.cityWeather.weather && this.state.cityWeather.weather[0].description}</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Home.js';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}